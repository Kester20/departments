package com.aimprosoft.noormal.servicebuilder.model.impl;

import com.aimprosoft.noormal.servicebuilder.model.Department;
import com.aimprosoft.noormal.servicebuilder.model.DepartmentModel;

import com.aimprosoft.noormal.validator.DepartmentUniqueNameValidator;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;
import net.sf.oval.constraint.CheckWith;
import net.sf.oval.constraint.Length;
import net.sf.oval.constraint.NotEmpty;
import net.sf.oval.constraint.NotNull;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

import static com.aimprosoft.noormal.util.Constants.Messages.DEPARTMENT_WITH_THIS_NAME_IS_ALREADY_EXIST;
import static com.aimprosoft.noormal.util.Constants.Messages.MUST_BE_LESS_THEN_30;
import static com.aimprosoft.noormal.util.Constants.Messages.MUST_NOT_BE_EMPTY;

/**
 * The base model implementation for the Department service. Represents a row in the &quot;department&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.aimprosoft.noormal.servicebuilder.model.DepartmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DepartmentImpl}.
 * </p>
 *
 * @author Arsalan
 * @see DepartmentImpl
 * @see com.aimprosoft.noormal.servicebuilder.model.Department
 * @see com.aimprosoft.noormal.servicebuilder.model.DepartmentModel
 * @generated
 */
public class DepartmentModelImpl extends BaseModelImpl<Department>
    implements DepartmentModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a department model instance should use the {@link com.aimprosoft.noormal.servicebuilder.model.Department} interface instead.
     */
    public static final String TABLE_NAME = "department";
    public static final Object[][] TABLE_COLUMNS = {
            { "departmentId", Types.BIGINT },
            { "name", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table department (departmentId LONG not null primary key,name VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table department";
    public static final String ORDER_BY_JPQL = " ORDER BY department.departmentId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY department.departmentId ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.aimprosoft.noormal.servicebuilder.model.Department"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.aimprosoft.noormal.servicebuilder.model.Department"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.aimprosoft.noormal.servicebuilder.model.Department"),
            true);
    public static long NAME_COLUMN_BITMASK = 1L;
    public static long DEPARTMENTID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.aimprosoft.noormal.servicebuilder.model.Department"));
    private static ClassLoader _classLoader = Department.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Department.class
        };
    private long _departmentId;

    @CheckWith(value = DepartmentUniqueNameValidator.class, message = DEPARTMENT_WITH_THIS_NAME_IS_ALREADY_EXIST)
    @NotEmpty(message = MUST_NOT_BE_EMPTY)
    @NotNull(message = MUST_NOT_BE_EMPTY)
    @Length(max = 30, message = MUST_BE_LESS_THEN_30)
    private String _name;
    private String _originalName;
    private long _columnBitmask;
    private Department _escapedModel;

    public DepartmentModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _departmentId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setDepartmentId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _departmentId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Department.class;
    }

    @Override
    public String getModelClassName() {
        return Department.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("departmentId", getDepartmentId());
        attributes.put("name", getName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long departmentId = (Long) attributes.get("departmentId");

        if (departmentId != null) {
            setDepartmentId(departmentId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }
    }

    @Override
    public long getDepartmentId() {
        return _departmentId;
    }

    @Override
    public void setDepartmentId(long departmentId) {
        _departmentId = departmentId;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask |= NAME_COLUMN_BITMASK;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Department.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Department toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Department) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        DepartmentImpl departmentImpl = new DepartmentImpl();

        departmentImpl.setDepartmentId(getDepartmentId());
        departmentImpl.setName(getName());

        departmentImpl.resetOriginalValues();

        return departmentImpl;
    }

    @Override
    public int compareTo(Department department) {
        long primaryKey = department.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Department)) {
            return false;
        }

        Department department = (Department) obj;

        long primaryKey = department.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        DepartmentModelImpl departmentModelImpl = this;

        departmentModelImpl._originalName = departmentModelImpl._name;

        departmentModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Department> toCacheModel() {
        DepartmentCacheModel departmentCacheModel = new DepartmentCacheModel();

        departmentCacheModel.departmentId = getDepartmentId();

        departmentCacheModel.name = getName();

        String name = departmentCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            departmentCacheModel.name = null;
        }

        return departmentCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{departmentId=");
        sb.append(getDepartmentId());
        sb.append(", name=");
        sb.append(getName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.aimprosoft.noormal.servicebuilder.model.Department");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>departmentId</column-name><column-value><![CDATA[");
        sb.append(getDepartmentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
