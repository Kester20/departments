package com.aimprosoft.noormal.servicebuilder.model.impl;

import com.aimprosoft.noormal.servicebuilder.model.Employee;
import com.aimprosoft.noormal.servicebuilder.model.EmployeeModel;

import com.aimprosoft.noormal.util.Constants;
import com.aimprosoft.noormal.validator.EmployeeUniqueEmailValidator;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;
import net.sf.oval.constraint.CheckWith;
import net.sf.oval.constraint.Length;
import net.sf.oval.constraint.NotEmpty;
import net.sf.oval.constraint.NotNull;
import org.springframework.format.annotation.DateTimeFormat;

import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import static com.aimprosoft.noormal.util.Constants.Messages.MUST_BE_LESS_THEN_30;
import static com.aimprosoft.noormal.util.Constants.ServiceConstants.DATE_FORMAT;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.aimprosoft.noormal.servicebuilder.model.EmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author Arsalan
 * @see EmployeeImpl
 * @see com.aimprosoft.noormal.servicebuilder.model.Employee
 * @see com.aimprosoft.noormal.servicebuilder.model.EmployeeModel
 * @generated
 */
public class EmployeeModelImpl extends BaseModelImpl<Employee>
    implements EmployeeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link com.aimprosoft.noormal.servicebuilder.model.Employee} interface instead.
     */
    public static final String TABLE_NAME = "employee";
    public static final Object[][] TABLE_COLUMNS = {
            { "employeeId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "age", Types.INTEGER },
            { "dateOfBirth", Types.TIMESTAMP },
            { "email", Types.VARCHAR },
            { "department", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table employee (employeeId LONG not null primary key,name VARCHAR(75) null,age INTEGER,dateOfBirth DATE null,email VARCHAR(75) null,department LONG)";
    public static final String TABLE_SQL_DROP = "drop table employee";
    public static final String ORDER_BY_JPQL = " ORDER BY employee.employeeId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY employee.employeeId ASC";
    public static final String DATA_SOURCE = "anotherDataSource";
    public static final String SESSION_FACTORY = "anotherSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.aimprosoft.noormal.servicebuilder.model.Employee"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.aimprosoft.noormal.servicebuilder.model.Employee"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.aimprosoft.noormal.servicebuilder.model.Employee"),
            true);
    public static long DEPARTMENT_COLUMN_BITMASK = 1L;
    public static long EMAIL_COLUMN_BITMASK = 2L;
    public static long EMPLOYEEID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.aimprosoft.noormal.servicebuilder.model.Employee"));
    private static ClassLoader _classLoader = Employee.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Employee.class
        };
    private long _employeeId;

    @NotEmpty(message = Constants.Messages.MUST_NOT_BE_EMPTY)
    @NotNull(message = Constants.Messages.MUST_NOT_BE_EMPTY)
    private String _name;

    @NotEmpty(message = Constants.Messages.MUST_NOT_BE_EMPTY)
    @NotNull(message = Constants.Messages.MUST_NOT_BE_EMPTY)
    private int _age;

    @NotEmpty(message = Constants.Messages.MUST_NOT_BE_EMPTY)
    @NotNull(message = Constants.Messages.MUST_NOT_BE_EMPTY)
    @DateTimeFormat(pattern = DATE_FORMAT)
    @Temporal(TemporalType.DATE)
    private Date _dateOfBirth;

    @CheckWith(value = EmployeeUniqueEmailValidator.class, message = Constants.Messages.EMPLOYEE_WITH_THIS_EMAIL_IS_ALREADY_EXIST)
    @NotEmpty(message = Constants.Messages.MUST_NOT_BE_EMPTY)
    @NotNull(message = Constants.Messages.MUST_NOT_BE_EMPTY)
    @Length(max = 30, message = MUST_BE_LESS_THEN_30)
    private String _email;
    private String _originalEmail;
    private long _department;
    private long _originalDepartment;
    private boolean _setOriginalDepartment;
    private long _columnBitmask;
    private Employee _escapedModel;

    public EmployeeModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _employeeId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setEmployeeId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _employeeId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Employee.class;
    }

    @Override
    public String getModelClassName() {
        return Employee.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("employeeId", getEmployeeId());
        attributes.put("name", getName());
        attributes.put("age", getAge());
        attributes.put("dateOfBirth", getDateOfBirth());
        attributes.put("email", getEmail());
        attributes.put("department", getDepartment());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long employeeId = (Long) attributes.get("employeeId");

        if (employeeId != null) {
            setEmployeeId(employeeId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Integer age = (Integer) attributes.get("age");

        if (age != null) {
            setAge(age);
        }

        Date dateOfBirth = (Date) attributes.get("dateOfBirth");

        if (dateOfBirth != null) {
            setDateOfBirth(dateOfBirth);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        Long department = (Long) attributes.get("department");

        if (department != null) {
            setDepartment(department);
        }
    }

    @Override
    public long getEmployeeId() {
        return _employeeId;
    }

    @Override
    public void setEmployeeId(long employeeId) {
        _employeeId = employeeId;
    }

    @Override
    public String getName() {
        return _name;
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public int getAge() {
        return _age;
    }

    @Override
    public void setAge(int age) {
        _age = age;
    }

    @Override
    public Date getDateOfBirth() {
        return _dateOfBirth;
    }

    @Override
    public void setDateOfBirth(Date dateOfBirth) {
        _dateOfBirth = dateOfBirth;
    }

    @Override
    public String getEmail() {
        return _email;
    }

    @Override
    public void setEmail(String email) {
        _columnBitmask |= EMAIL_COLUMN_BITMASK;

        if (_originalEmail == null) {
            _originalEmail = _email;
        }

        _email = email;
    }

    public String getOriginalEmail() {
        return _originalEmail;
    }

    @Override
    public long getDepartment() {
        return _department;
    }

    @Override
    public void setDepartment(long department) {
        _columnBitmask |= DEPARTMENT_COLUMN_BITMASK;

        if (!_setOriginalDepartment) {
            _setOriginalDepartment = true;

            _originalDepartment = _department;
        }

        _department = department;
    }

    public long getOriginalDepartment() {
        return _originalDepartment;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Employee.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Employee toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Employee) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EmployeeImpl employeeImpl = new EmployeeImpl();

        employeeImpl.setEmployeeId(getEmployeeId());
        employeeImpl.setName(getName());
        employeeImpl.setAge(getAge());
        employeeImpl.setDateOfBirth(getDateOfBirth());
        employeeImpl.setEmail(getEmail());
        employeeImpl.setDepartment(getDepartment());

        employeeImpl.resetOriginalValues();

        return employeeImpl;
    }

    @Override
    public int compareTo(Employee employee) {
        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Employee)) {
            return false;
        }

        Employee employee = (Employee) obj;

        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EmployeeModelImpl employeeModelImpl = this;

        employeeModelImpl._originalEmail = employeeModelImpl._email;

        employeeModelImpl._originalDepartment = employeeModelImpl._department;

        employeeModelImpl._setOriginalDepartment = false;

        employeeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Employee> toCacheModel() {
        EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

        employeeCacheModel.employeeId = getEmployeeId();

        employeeCacheModel.name = getName();

        String name = employeeCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            employeeCacheModel.name = null;
        }

        employeeCacheModel.age = getAge();

        Date dateOfBirth = getDateOfBirth();

        if (dateOfBirth != null) {
            employeeCacheModel.dateOfBirth = dateOfBirth.getTime();
        } else {
            employeeCacheModel.dateOfBirth = Long.MIN_VALUE;
        }

        employeeCacheModel.email = getEmail();

        String email = employeeCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            employeeCacheModel.email = null;
        }

        employeeCacheModel.department = getDepartment();

        return employeeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{employeeId=");
        sb.append(getEmployeeId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", age=");
        sb.append(getAge());
        sb.append(", dateOfBirth=");
        sb.append(getDateOfBirth());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", department=");
        sb.append(getDepartment());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.aimprosoft.noormal.servicebuilder.model.Employee");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>employeeId</column-name><column-value><![CDATA[");
        sb.append(getEmployeeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>age</column-name><column-value><![CDATA[");
        sb.append(getAge());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dateOfBirth</column-name><column-value><![CDATA[");
        sb.append(getDateOfBirth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>department</column-name><column-value><![CDATA[");
        sb.append(getDepartment());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
